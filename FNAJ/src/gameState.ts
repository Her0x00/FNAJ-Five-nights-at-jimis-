/* Enemy
 *
 * Varje motst친ndar f칬ljer en specifik path 친v kameror, dem kan ga fram친t back친t eller skip
 * nain heilt
 * 
 * varje X sekunder har en motst친ndar en chans att flytt fram친t beroende p친 en random nummer mellan 0-20
 * Motst친ndarns "difficulty" 칛r ocks친 mellan 0-20, om numri genererad mellan intervalet 칛r lika med 
 * eller mindre 칛n difficulty inst칛llningen flyttar dem. Varje g친ng dem flyttar sig finns he en lillan
 * chans att dem flyttar se bak친t ifr친n spelarn
*/

const ENEMY_MAX_DIFFICULTY: number = 20;

export class Enemy {
    name: string = "";
    
    AttackPath: object;

    AttackState: number; // Var 칛r dem
    
    Attacking: boolean = false; //dem v칛ntar p친 att du ska ta ner cams f칬r att 游꼖 de
    AtDoor: boolean = false; // 칛r en animatronic breivi d칬rren elo it

    Difficulty: number;

    AttackInterval: number;
    AttackTimer: number;

    /* om dem blir stalled s친 dem far it till f칬rsta attack stage
       utan dem bara v칛ntar tills du slutar stall de f칬r att forts칛tt vidari
    */
    stalled: boolean = false;
    CanAttack: boolean;
    
    constructor(AttackInterval: number) {
        this.AttackPath = [];
        this.AttackState = 0;

        this.AttackInterval = AttackInterval;
        this.AttackTimer = 0;
        this.Difficulty = 0;
        this.CanAttack = true;
    }

    SetDifficulty(Difficulty: number) {
        this.Difficulty = Difficulty;
    }

    /* Enemy spel logic som k칬rs furi movement check som 
     * t.ex om du kollar p친 kameran dem 칛r p친 s친 buri dem edge elo na 
    */
    Update(resources: object) {}

    tick(deltatime: number) {
        this.Update();
        //console.log(`tick(${deltatime})`);
        //console.log("attacktimer: " + this.AttackTimer);
        this.AttackTimer += (deltatime / 1000);

        if (this.AttackTimer >= this.AttackInterval) { // F칬rs칬k flytt
            console.log()
            if (Math.floor(Math.random() * ENEMY_MAX_DIFFICULTY) >= this.Difficulty && this.CanAttack) {
                console.log("MoveSucess()");
                this.MoveSuccess(); // varje animatronic m친st nan manuelt kod hur dem flyttar se
            } else {
                console.log("MoveFailure()");
                this.MoveFailure();
            }

            console.log("attackState after movement:", this.AttackState);
            this.AttackTimer = 0;
        }
    }

    /* Enemy flyttar se */
    MoveSuccess() {}
    
    /* Enemy failar sin movement check, s친 dem idk 칬kar sin difficulty inst칛llning eller na idk */
    MoveFailure() {}
}


/* her ti 칛nder p친 logic vart ett man hittar p친 na typ */
class Bonnie extends Enemy {
    constructor() {
        super(5);
        
        this.name = "Bonnie";

        this.SetDifficulty(4);


        /*
        Borda vara samma AI som anv칛nds i orginala speli,
        btw path 12 칛r office window 13 칛r han 칛r i office e.g spelarn blir 游꼖'ed
        */
        this.AttackPath =  {
                0: [
                    {path: 1, odds: 0.70},
                    {path: 8, odds: 0.30}
                ],


                1: [
                    {path: 8, odds: 0.60},
                    {path: 3, odds: 0.40}
                ],

                8: [
                    {path: 1, odds: 0.60},
                    {path: 3, odds: 0.40}
                ],

                3: [
                    {path: 4, odds: 0.70},
                    {path: 5, odds: 0.30},
                ],

                4: [
                    {path: 12, odds: 0.80}, // om bonnie blir cockblocked far han ti baks ti cam 1 n칛sta movement chans
                    {path: 5, odds: 0.20}
                ],

                5: [
                    {path: 3, odds: 0.70},
                    {path: 13, odds: 0.30} // lil chans att han 游꼖 ein ent친
                ],


        }

        this.AttackState = 0; // stage
    }

    Update(resources: object): void {
        if (this.Attacking) {
            console.log("DEAD");
        }


        if (this.AttackState == 12) {
            if (resources.doors.left.open) {
                this.CanAttack = false;
            }

            if (resources.doors.left.lightsOn) {
                this.stalled = true;
            }
        }
        
    }

    MoveSuccess(): void {
        switch(this.AttackState) {
            case 12: // han er vi d칬rren
                if (this.CanAttack && !this.stalled) { // d칬rren it er st칛nged
                    this.AtDoor = false;
                    this.AttackState = 13;
                    this.Attacking = true;
                }

                if (!this.CanAttack && !this.stalled) { // the door is blocked, move back to diner
                    this.AttackState = 1;
                }

                break;


            default:

                // uuh ja tror dehe borda funk ?
                let path = this.AttackPath[this.AttackState];
                console.log(path);
                console.log()
                if (Math.random() >= path[0].odds) {
                    this.AttackState = path[0].path
                } else {
                    this.AttackState = path[1].path;
                }

        }
    }

    MoveFailure(): void {
        
    }
}



/* 
Spel logic bla annat, 
van er olika fienderna och hur mucki str칬m har do
*/
export default class GameState {
    cameras: Array<object>;
    enemies: Array<Enemy>;

    /* 츿r d칬rran st칛ngd eller 칬ppin, lamporna av eller p친
    * Hur mucki str칬m finns ikvar, hu mucki str칬m anv칛nds just nu,
    * Om spelaren kollar p친 en kamera vilken kamera kollar dem p친 o.sv 
    * blir passera till entities 
    */
    resources: object;

    //anv칛nds j칛r i GameState classin f칬 skit
    deltatime: number;
    
    constructor() {
        this.deltatime = 0;

        this.resources = {
            power: {
                battery: 100,
                usage: 0,
            },

            doors: {
                left: {
                    open: true,
                    lightsOn: false,
                    empty: true // bonnie 칛r han 칛nda som kan vara j칛r
                },

                right: {
                    open: true,
                    lightsOn: false,
                    empty: true // h칬gra d칬rren i spelli s친 kan bara chika k친ll p친 de igenom,
                    //  dehenan variabeln er mest bara f칬r att simplif칬ser rendering
                }
            },

            cameras: {
                enabled: false,
                cameraIndex: 0,
            }
        }

        this.cameras = [];

        
        /*
        Om man sko typ 칛nder dem seinari ti na annat som mamm din elo na annat l칛skigt
        */


        this.enemies = [
            new Bonnie,
        ]
    }

    // blir p친kalla varje frame inuti update function p친 i scenen
    tick(deltatime: number) {
        this.deltatime = deltatime;

        for (let i = 0; i < this.enemies.length; i++) {
            this.enemies[i].tick(deltatime);
        }
    }
};